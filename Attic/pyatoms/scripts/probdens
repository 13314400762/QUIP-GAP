#!/usr/bin/env python
# HP XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# HP X
# HP X   pyatoms: atomistic simulations tools
# HP X
# HP X   Copyright James Kermode 2010
# HP X
# HP X   These portions of the source code are released under the GNU General
# HP X   Public License, version 2, http://www.gnu.org/copyleft/gpl.html
# HP X
# HP X   If you would like to license the source code under different terms,
# HP X   please contact James Kermode, james.kermode@gmail.com
# HP X
# HP X   When using this software, please cite the following reference:
# HP X
# HP X   http://www.jrkermode.co.uk/PyAtoms
# HP X
# HP XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

from numpy import *
import sys, string

lines = sys.stdin.readlines()

lines = filter(lambda x: x.strip() != '', lines)

data = array(map(float, lines))

n_density = int(sys.argv[1])
sigma = float(sys.argv[2])
densities = []

x = arange(n_density)
prefactor = 1.0/(sigma*sqrt(2*pi))

density = zeros(n_density)
y1 = data.min()
y2 = data.max()

for y in data:
   mu = (y - y1)/(y2 - y1)*(n_density-1)
   x_sub_mu = x - mu
   gaussian = prefactor*exp(-(x_sub_mu*x_sub_mu)/(2*sigma*sigma))
   density = density + gaussian

# normalise to have integral 1

xs = arange(n_density)/float(n_density)*(y2-y1)+y1
ys = density
integral = 0

dx = xs[1] - xs[0]

for i in range(len(xs)):
   y_dx = ys[i]*dx
   if (i == 0 or i == len(xs)-1):
      integral = integral + y_dx/3.0
   elif (i % 2 == 0):
      integral = integral + 2.0/3.0*y_dx
   else:
      integral = integral + 4.0/3.0*y_dx

density = density / integral

for n in range(n_density):
   print '%16.8e%16.8e' % (xs[n],density[n])
