#!/bin/sh
# HP XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# HP X
# HP X   pyatoms: atomistic simulations tools
# HP X
# HP X   Copyright James Kermode 2010
# HP X
# HP X   These portions of the source code are released under the GNU General
# HP X   Public License, version 2, http://www.gnu.org/copyleft/gpl.html
# HP X
# HP X   If you would like to license the source code under different terms,
# HP X   please contact James Kermode, james.kermode@gmail.com
# HP X
# HP X   When using this software, please cite the following reference:
# HP X
# HP X   http://www.jrkermode.co.uk/PyAtoms
# HP X
# HP XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

if [[ $# != 3 ]]; then
  echo "Usage: $0 <source.xyz> <template.xyz> <property name>"
  echo
  echo Make a copy of the template XYZ file, with an additional property taken
  echo from the the source XYZ file.
  exit 0
fi

source=$1
template=$2
property=$3

sourceN=`head -1 $source`
templateN=`head -1 $template`

if [[ $sourceN != $templateN ]]; then
    echo Source and template number of atoms don\'t match
    exit 1
fi

sourcecomment=`head -2 $source | tail -1`
templatecomment=`head -2 $template | tail -1`

# check source has property
if ! echo $sourcecomment | grep -q $property; then
    echo No \"$property\" field in $source
    exit 1
fi

# check template doesn't have property
if echo $templatecomment | grep -q $property; then
    echo $template already has \"$property" field
    exit 1
fi

# output number of atoms
echo $sourceN

# extract tag for this property from source
prop_tag=`echo $sourcecomment | awk '{match($0,/('$property':[^:]*:[^: ])/,a); print a[0] }'`

# ... and append it to properties parameter in template
echo $templatecomment | awk '{sub(/Properties=[^ ]*/,"&:'$prop_tag'"); print}'

# Output lines of $template with chosen property from $source appended
awk 'NR == 2 {
  match($0,/Properties=([^ ]*)/,a);
  nf = split(a[1],b,/:/);
  
  sum=0;
  for (i = 1; i <= nf; i+=3) {
    if(b[i] != "'$property'")
      { sum = sum + b[i+2]}
    else
      { begin=sum+1; end=sum+b[i+2]; break; }
  };
  n = 1;
  for (i = begin+1; i <= end +1; i++) {
     fields[n]=i;
     n++;
  }
  n_fields=n-1;

  # throw away first two lines of template
  getline <"'$template'";
  getline <"'$template'";

 }

NR > 2 && NR <= '$templateN'+2 {
  getline line <"'$template'";
  printf "%s",line;
  for (i = 1; i <= n_fields; i++) printf "%16.8f",$fields[i];
  printf "\n";
}' $source
