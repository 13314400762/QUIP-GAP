#!/usr/bin/env python

from numpy import *
from quippy import *

if len(sys.argv) != 2:
  print "Computes velocity power spectrum (autocorrelation Fourier-transform"
  print "  magnitude) as a function of frequency"
  print "Usage: %s infile" % sys.argv[0]
  sys.exit(1)

ar = AtomsList(sys.argv[1])
n_frames = len(ar)
n_atoms = ar[1].n
vels = fzeros((3*n_frames, 3*n_atoms))
i_frame = 1
if 'velo' not in ar[1].properties.keys():
  prev_at = None
for at in ar:
  print >> sys.stderr, "config %d" % i_frame
  if 'velo' in at.properties.keys():
    for i in frange(n_atoms):
      vels[i_frame+n_frames, 3*(i-1)+1] = at.velo[1,i]
      vels[i_frame+n_frames, 3*(i-1)+2] = at.velo[2,i]
      vels[i_frame+n_frames, 3*(i-1)+3] = at.velo[3,i]
  else:
    if not prev_at is None:
      dt = at.params['time'] - prev_at.params['time']
      for i in frange(n_atoms):
	vels[i_frame+n_frames, 3*(i-1)+1] = (at.pos[1,i] - prev_at.pos[1,i])*dt
	vels[i_frame+n_frames, 3*(i-1)+2] = (at.pos[2,i] - prev_at.pos[2,i])*dt
	vels[i_frame+n_frames, 3*(i-1)+3] = (at.pos[3,i] - prev_at.pos[3,i])*dt
    prev_at = at.copy()
  i_frame += 1

if (len(vels[:,1]) % 2) == 0:
  mean_vel_fft = zeros(len(vels[:,1])/2+1)
else:
  mean_vel_fft = zeros(len(vels[:,1]-1)/2+1)

for i in frange(n_atoms): 
  print >> sys.stderr, "fft atom %d" % i
  for j in frange(3):
    vel_fft = numpy.fft.rfft(vels[:,3*(i-1)+j])
    mean_vel_fft[:] += abs(vel_fft[:]*vel_fft[:])

print "# omega(1/fs)  |v(omega)^2|"
mean_vel_fft[:] /= 3*n_atoms
ii = 0
for i in mean_vel_fft:
  print "%f %f" % (ii*2.0*PI/(3*n_frames*dt), i)
  ii += 1
