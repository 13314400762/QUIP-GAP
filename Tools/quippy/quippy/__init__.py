"""quippy package. Contains python bindings to the libAtoms F95 code 
<http://www.libatoms.org> and optionally also to QUIP. """

import _quippy

import sys, cPickle, atexit, os, numpy, logging

from numpy import *

logging.root.setLevel(logging.WARNING)

from oo_fortran  import FortranDerivedType, FortranDerivedTypes, wrap_all

# Read spec file generated by f90doc -f and construct wrappers for classes
# and routines found therein.

_quippy.system.system_initialise()
atexit.register(_quippy.system.system_finalise)

spec = cPickle.load(open(os.path.join(os.path.dirname(__file__),'quippy.spec')))

classes, routines, params = wrap_all(_quippy, spec, spec['wrap_modules'], spec['short_names'])

for name, cls in classes:
   setattr(sys.modules[__name__], name, cls)

for name, routine in routines:
   setattr(sys.modules[__name__], name, routine)

sys.modules[__name__].__dict__.update(params)

del classes
del routines
del params
del wrap_all
                      
import extras

from farray import *
from atomslist import *

# Convert periodic table arrays
ElementName = farray([s.strip() for s in ElementName[2:]])
ElementMass = dict(zip(ElementName,ElementMass))
ElementCovRad = dict(zip(ElementName,ElementCovRad))

for classname, extra in extras.extras_map.iteritems():
   cls = getattr(sys.modules[__name__], classname)
   cls.__bases__  = tuple([extra] + list(cls.__bases__))
   cls._init_extra()

import atomeye

