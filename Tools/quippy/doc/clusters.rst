:mod:`quippy.clusters` - cluster carving routines
=================================================

.. currentmodule: quippy.clusters

.. function:: create_hybrid_weights(at, args_str)

   Given an atoms structure with a `hybrid_mark` property, this
   routine creates a `weight_region1` property, whose values are
   between 0 and 1.

.. function:: create_cluster_info_from_mark(at, args_str[, cut_bonds])

   Create a cluster using the 'hybrid_mark' property and options in
   `args_str`.  All atoms that are marked with anything other than
   ``HYBRID_NO_MARK`` will be included in the cluster; this includes
   active, transition and buffer atoms.

   Optionally return a list of the bonds cut when making the cluster in the 
   :class:`Table` `cut_bonds`.


.. function:: carve_cluster(at, args_str, cluster_info)

   Carve a cluster from `at` using the information in the
   :class:`Table` `cluster_info`, which should be generated by a
   call to :func:`create_cluster_info_from_hybrid_mark`.

   The output cluster contains all properties of the initial atoms object, and
   some additional columns, which are:

    ``index``
	index of the cluster atoms into the initial atoms object.

    ``termindex`` 
       nonzero for termination atoms, and is an index into
       the cluster atoms specifiying which atom is being terminated,
       it is used in collecting the forces.

    ``rescale`` 
	a real number which for nontermination atoms is 1.0,
        for termination atoms records the scaling applied to
        termination bond lengths
    
    ``shift``
	the shift of each atom

.. function:: construct_buffer(at, core, radius[, use_avgpos, verbosity])
   
   Given an atoms object, and a list of core atoms in the first
   integer of the `core` table, fill the `buffer` table with all atoms
   within `radius` of any core atom (which can be reached by
   connectivity hopping).  Optionally use the time averaged positions.


.. function:: create_embed_and_fit_list(at, fit_hops,[nneighb_only,min_images_only])

   Given an Atoms structure with an active region marked in the
   `hybrid_mark` property using ``HYBRID_ACTIVE_MARK``, grow the embed
   region by `fit_hops` bond hops to form a fit region. 

   Returns the  embedlist and fitlist as :class:`Table` objects
   with correct periodic shifts.


.. function:: estimate_origin_extent(at, active, cluster_radius)

   Return estimated `(origin, extent)` for hysteretic connectivity 
   calculator to include all atoms within a distance `cluster_radius`
   of an atom in the `active` array.
