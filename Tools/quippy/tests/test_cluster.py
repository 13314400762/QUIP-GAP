from quippy import *
import unittest, quippy
from quippytest import *

class TestCluster(QuippyTestCase):

   def setUp(self):
      self.xml="""
      <SW_params n_types="2" label="PRB_31_plus_H">
      <comment> Stillinger and Weber, Phys. Rev. B  31 p 5262 (1984), extended for other elements </comment>
      <per_type_data type="1" atomic_num="1" />
      <per_type_data type="2" atomic_num="14" />
      <per_pair_data atnum_i="1" atnum_j="1" AA="0.0" BB="0.0"
            p="0" q="0" a="1.0" sigma="1.0" eps="0.0" />
      <per_pair_data atnum_i="1" atnum_j="14" AA="8.581214" BB="0.0327827"
            p="4" q="0" a="1.25" sigma="2.537884" eps="2.1672" />
      <per_pair_data atnum_i="14" atnum_j="14" AA="7.049556277" BB="0.6022245584"
            p="4" q="0" a="1.80" sigma="2.0951" eps="2.1675" />

      <!-- triplet terms: atnum_c is the center atom, neighbours j and k -->
      <per_triplet_data atnum_c="1"  atnum_j="1"  atnum_k="1"
            lambda="21.0" gamma="1.20" eps="2.1675" />
      <per_triplet_data atnum_c="1"  atnum_j="1"  atnum_k="14"
            lambda="21.0" gamma="1.20" eps="2.1675" />
      <per_triplet_data atnum_c="1"  atnum_j="14" atnum_k="14"
            lambda="21.0" gamma="1.20" eps="2.1675" />

      <per_triplet_data atnum_c="14" atnum_j="1"  atnum_k="1"
            lambda="21.0" gamma="1.20" eps="2.1675" />
      <per_triplet_data atnum_c="14" atnum_j="1"  atnum_k="14"
            lambda="21.0" gamma="1.20" eps="2.1675" />
      <per_triplet_data atnum_c="14" atnum_j="14" atnum_k="14"
            lambda="21.0" gamma="1.20" eps="2.1675" />
      </SW_params>
      """

      system_reseed_rng(1)
      if hasattr(quippy, 'Potential'):
         self.pot = Potential('IP SW', self.xml)

      self.at = supercell(diamond(5.44, 14), 4, 4, 4)
      matrix_randomise(self.at.pos, 0.1)
      self.at.calc_connect()

      self.embedlist = Table()
      self.embedlist.append((1,0,0,0))
      self.at.bfs_grow_list(self.embedlist, 2, nneighb_only=True)

      self.at.add_property('hybrid',0)
      self.at.hybrid[self.embedlist.int[1,:]] = 1

      self.bufferlist = self.embedlist.copy()
      self.at.bfs_grow_list(self.bufferlist, 2, nneighb_only=True)

      self.at.add_property('hybrid_mark', 0)
      self.at.hybrid_mark[self.at.hybrid == 1] = HYBRID_ACTIVE_MARK
      for i in self.bufferlist.int[1,:]:
         if not self.at.hybrid_mark[i]:
            self.at.hybrid_mark[i] = HYBRID_BUFFER_MARK

      self.args = {'cluster_calc_connect': True,
                   'randomise_buffer': False}

      self.cluster_info = create_cluster_info_from_hybrid_mark(self.at, args_str(self.args))
      self.cluster = carve_cluster(self.at, args_str(self.args), self.cluster_info)

      self.f_ref = FortranArray([[  4.49946168e-01,  -6.09379142e-02,   3.92952443e-01],
                                 [  7.69575734e-02,   9.27391444e-01,  -3.44793646e-01],
                                 [ -2.02228557e-01,   4.45722576e-01,   1.44150742e-01],
                                 [ -1.40435257e-01,   4.06389548e-02,  -4.75283464e-01],
                                 [  4.24383255e-01,  -1.04561975e-01,  -4.38075601e-01],
                                 [ -1.10172818e+00,   1.50950893e-01,  -6.67373519e-01],
                                 [  4.72538822e-01,  -6.36056757e-01,   6.94790777e-01],
                                 [ -4.37414786e-01,  -3.31849259e-01,  -2.21969540e-03],
                                 [ -7.30100985e-02,  -5.90006826e-01,   7.68595065e-01],
                                 [  3.62099744e-01,   2.08078307e-02,  -6.70631405e-01],
                                 [ -5.69033700e-01,   2.45540196e-01,  -9.66883026e-01],
                                 [  1.21494559e+00,  -1.72531066e-01,  -3.33663179e-01],
                                 [  7.75573582e-01,  -8.20173466e-02,   1.90347279e-02],
                                 [  2.35090293e-01,   5.94796741e-01,  -1.63420941e-01],
                                 [  4.18280814e-01,  -6.46599161e-02,   9.52184285e-02],
                                 [ -5.23907757e-01,  -1.74624753e+00,  -4.38125533e-01],
                                 [ -6.75287389e-01,  -3.55613378e-01,  -3.23407833e-01],
                                 [  1.16212994e-01,   2.33807426e-01,  -3.57987926e-01],
                                 [  9.00865980e-01,   1.02648958e-01,   1.34640116e+00],
                                 [ -5.61232766e-01,   5.94375079e-01,   2.58158081e-01],
                                 [ -8.45451051e-01,   8.35795673e-01,  -8.66315318e-01],
                                 [ -6.03214357e-01,  -3.48598437e-01,   2.59936659e-01],
                                 [  2.31133176e-02,  -3.65238052e-01,   7.94697994e-01],
                                 [  3.25241203e-01,   5.17339532e-01,   3.81696098e-02],
                                 [ -7.14249295e-01,  -1.16172581e+00,  -4.04560675e-01],
                                 [ -2.20298120e-01,   1.39035805e+00,   3.71767276e-01],
                                 [  4.41216139e-01,   9.55317131e-01,  -9.30998955e-01],
                                 [ -2.54206800e-01,   3.59321548e-01,  -6.26018673e-01],
                                 [ -6.96736644e-02,  -7.11004908e-01,  -3.48846847e-01],
                                 [ -1.36516934e+00,  -4.29532278e-01,   2.31083169e-01],
                                 [  6.97770531e-01,  -8.41390678e-01,  -5.02275486e-01],
                                 [  1.41386696e-01,  -1.06289729e+00,   7.13051235e-01],
                                 [  2.16032214e-01,   7.20638556e-01,  -1.09041574e-01],
                                 [ -1.08633723e+00,   1.95476000e-01,   5.03984300e-02],
                                 [ -1.74089762e-01,  -8.42900057e-01,   7.31890148e-01],
                                 [  8.16468165e-01,  -2.57161798e-01,  -9.42833365e-01],
                                 [  4.64668903e-01,   3.34698812e-01,   1.19421758e+00],
                                 [ -1.01092085e+00,   1.65574341e-01,  -4.04852770e-01],
                                 [ -3.33394643e-01,   9.96791104e-01,   3.19633559e-01],
                                 [  2.39140333e-01,   1.36827390e+00,   6.63554687e-01],
                                 [  5.94345388e-01,  -7.91705824e-02,   8.54480237e-01],
                                 [  1.47508485e-01,  -1.12399858e-01,   1.56800416e-01],
                                 [  6.53124727e-01,  -3.97324588e-01,   1.02858643e+00],
                                 [  8.24748414e-01,  -1.37549447e-01,  -4.62011429e-01],
                                 [ -1.06248544e+00,  -5.07628221e-01,  -6.69374435e-01],
                                 [ -1.07842657e+00,   7.35733209e-01,  -1.02314687e+00],
                                 [  7.65194291e-01,  -4.31216941e-03,   3.65084425e-01],
                                 [  5.29299880e-01,  -3.32875306e-02,   5.71925207e-02],
                                 [  9.97170843e-02,  -9.35899127e-01,   7.25971820e-01],
                                 [  5.11146119e-01,   6.45426932e-01,   1.27124290e-01],
                                 [ -7.16063471e-01,  -6.15202701e-01,   2.36629412e-01],
                                 [  4.99978360e-01,  -7.93199816e-01,  -8.18023604e-01],
                                 [ -4.59200973e-01,   1.47754149e-01,  -2.95829785e-01],
                                 [  8.77801932e-01,  -3.59533558e-01,   8.65156721e-01],
                                 [  1.11028081e-01,   1.01684690e+00,  -7.82088237e-01],
                                 [  1.80066667e-01,  -1.30602298e+00,   4.36386885e-01],
                                 [ -1.79257993e-01,  -4.60062135e-01,   5.53519253e-01],
                                 [  3.66863224e-01,   1.42357648e-01,  -7.55336911e-01],
                                 [  7.15913181e-01,   3.33915227e-01,   2.81834595e-01],
                                 [  2.04168319e-02,  -1.69610299e-01,   9.89817342e-01],
                                 [ -6.09305038e-01,   4.25196921e-01,  -3.70542517e-01],
                                 [ -1.21186196e-01,   6.54768293e-01,   1.61626847e-01],
                                 [  8.73419064e-02,   5.18958050e-01,   7.14043996e-01],
                                 [  6.61965457e-01,   7.61639411e-01,   4.25145129e-01],
                                 [  9.97457305e-01,  -6.16701687e-01,   5.14112990e-01],
                                 [ -8.48897570e-01,  -9.86977861e-03,   3.62741199e-01],
                                 [  2.22369986e-01,   2.08626067e-01,  -2.54993844e-01],
                                 [  4.38129418e-01,   2.86866878e-01,  -9.45716713e-01],
                                 [  7.91295349e-01,  -9.14754670e-01,   7.06984405e-01],
                                 [ -1.04577861e+00,  -6.54573933e-01,  -5.43965919e-01],
                                 [  1.39609425e-01,  -2.76304188e-01,   8.58081302e-02],
                                 [  4.53701905e-01,   7.54385234e-01,  -6.85468337e-01],
                                 [  6.69228527e-02,   7.00598876e-01,  -2.00854111e-01],
                                 [  1.16496459e-01,   2.99815846e-01,   1.42074550e+00],
                                 [ -7.26572069e-01,  -4.30238209e-01,  -2.05428845e-01],
                                 [  2.69605090e-01,   3.89939328e-02,  -2.31329989e-01],
                                 [ -2.46687266e-01,  -1.20256629e+00,   5.20644922e-01],
                                 [  1.56794373e-01,  -9.53040254e-01,   3.11878524e-01],
                                 [  9.33507508e-01,   4.26841978e-01,  -6.48622018e-01],
                                 [  1.20446227e-01,  -6.21457480e-01,  -7.69514188e-01],
                                 [  8.50756621e-01,  -2.55211979e-01,   3.47917616e-01],
                                 [  1.85877508e-01,  -7.69425227e-02,   5.07382039e-01],
                                 [ -3.17463710e-01,   9.47075403e-01,  -2.78355026e-01],
                                 [ -2.30241453e-01,   1.40891014e-01,   1.65651697e-01],
                                 [  4.18544278e-02,  -1.37782459e-01,   1.05387981e-01],
                                 [  1.47281023e-01,   1.94468019e-01,  -2.83733759e-01],
                                 [ -1.09366989e-01,   1.83049412e-01,   2.29903664e-02],
                                 [ -2.76739117e-01,   2.91226749e-01,  -3.10822919e-01],
                                 [ -2.37867238e-01,   2.42797751e-01,   2.43990716e-01],
                                 [ -2.32969857e-01,  -1.24974088e-01,   2.35939602e-01],
                                 [  1.98313547e-02,  -7.37231188e-03,   1.23468520e-01],
                                 [  2.56237205e-01,  -1.45255521e-01,   2.97490519e-01],
                                 [  2.99137533e-01,   1.99465504e-01,  -2.26007483e-01],
                                 [  2.06481977e-01,  -1.98168119e-01,  -9.46643277e-02],
                                 [  6.17503562e-01,  -5.97314712e-01,   6.44576251e-01],
                                 [ -5.62598722e-02,   9.76904376e-04,  -1.57937370e-01],
                                 [ -2.42280958e-01,   2.36697196e-01,  -3.18194607e-01],
                                 [ -2.81172967e-01,  -2.17291420e-01,   2.05360187e-01],
                                 [ -2.60423658e-01,   1.50854754e-01,   2.46604884e-01],
                                 [  1.53855965e-02,  -6.38126426e-02,  -3.42686077e-02],
                                 [ -4.20561134e-02,   1.20541235e-01,   8.30465868e-02],
                                 [  3.09456585e-01,   3.52639458e-01,  -3.61787415e-01],
                                 [  7.09162293e-02,   4.47336664e-02,  -4.43274025e-03],
                                 [ -3.44690378e-02,   1.53973910e-02,  -8.65738548e-02],
                                 [ -2.06508390e-01,  -2.78317036e-01,  -2.20405046e-01],
                                 [  1.32027425e-01,   2.22889847e-03,  -6.67310386e-02],
                                 [  3.87019643e-01,   4.61142807e-01,  -3.30992821e-01],
                                 [  1.49669705e-01,   1.48885108e-01,   1.15295482e-01],
                                 [ -2.78826083e-01,   2.85703136e-01,   3.51891737e-01],
                                 [  2.38709970e-01,   3.24305913e-01,   3.37567197e-01],
                                 [  1.58407720e-02,   8.83004670e-02,   4.18145655e-02],
                                 [  1.59750375e-01,   1.92604418e-01,  -7.12331242e-02],
                                 [ -9.96237904e-02,  -1.14903106e-01,  -8.87348041e-02],
                                 [ -8.90819367e-02,   1.04481854e-02,   3.36999138e-02],
                                 [ -4.34295935e-01,   4.06906064e-01,  -3.49432999e-01],
                                 [ -3.77794264e-01,  -2.43416678e-01,  -3.82285429e-01],
                                 [  2.00354110e-01,  -3.75600383e-01,   3.58856864e-01],
                                 [  3.63166344e-02,  -1.77376609e-01,  -4.66169670e-03],
                                 [  7.14002772e-02,   2.68308740e-02,   9.93218019e-02],
                                 [ -7.62631949e-02,   1.98447723e-01,   5.78624502e-02],
                                 [ -4.71095106e-01,   5.31929174e-01,  -4.92121110e-01],
                                 [  1.66861102e-01,   2.17884253e-01,   1.71237409e-01],
                                 [ -2.62254578e-01,   2.38394513e-01,   1.66049676e-01],
                                 [  1.36078350e-01,  -1.02311315e-01,   6.45373264e-02],
                                 [ -2.63617969e-01,  -2.11260197e-01,  -2.34455025e-01],
                                 [ -2.36017691e-01,   1.55667446e-01,   3.07520213e-01],
                                 [  8.22589645e-02,  -1.41214343e-01,   2.26725944e-01],
                                 [ -2.08491510e-01,   1.45810795e-01,  -2.54667149e-01],
                                 [ -2.07044776e-01,  -2.69556750e-01,  -2.19343055e-01],
                                 [ -9.23161020e-02,   1.07409489e-01,  -2.27460582e-01],
                                 [ -1.86869672e-01,  -1.81145047e-01,  -2.76345270e-01],
                                 [  1.09470747e-01,  -6.48010046e-02,  -5.84977647e-02],
                                 [  3.57836456e-01,  -4.29852517e-01,   4.12935392e-01],
                                 [  1.17227172e-01,   4.91319923e-02,   7.78943197e-02],
                                 [  1.51519075e-01,  -2.36003235e-01,   1.74184572e-01],
                                 [ -7.88325801e-02,  -7.16163337e-02,   1.07593165e-02],
                                 [  1.74897367e-01,  -1.17514273e-01,  -1.02430620e-01],
                                 [ -2.11085682e-01,  -2.76724048e-02,  -1.71422049e-01],
                                 [ -2.49433324e-02,   4.67375209e-02,  -1.15136473e-01],
                                 [  2.06245867e-01,  -2.62343149e-01,  -2.57770980e-01],
                                 [ -1.72070446e-01,   7.67104234e-02,  -9.94600006e-02],
                                 [ -2.42605989e-01,  -1.70987110e-01,   2.05681105e-01],
                                 [ -5.84595808e-01,   5.75890995e-01,  -5.93645878e-01],
                                 [  1.35091141e-02,   1.72851528e-03,  -1.22101483e-02],
                                 [  7.75629058e-03,   1.09443455e-02,   3.90964333e-02],
                                 [  1.19462948e-01,   2.11869614e-01,  -1.30654694e-01],
                                 [  2.12782287e-01,   2.27075281e-01,   2.02800224e-01],
                                 [ -3.06046096e-02,  -2.80149129e-02,   1.84235157e-02],
                                 [ -2.56722558e-01,  -2.11734508e-01,   1.88963287e-01],
                                 [  4.80053995e-02,   5.77646796e-02,   3.72979641e-02],
                                 [  1.35435559e-01,  -1.72599696e-01,   2.65403700e-01],
                                 [ -3.67900175e-01,  -2.75734814e-01,   4.14150857e-01],
                                 [ -5.92073489e-02,  -2.30247982e-02,   6.54465425e-02],
                                 [ -3.05333975e-01,   2.03842393e-01,   1.63977128e-01],
                                 [ -4.32347524e-01,   4.60589650e-01,  -4.14536959e-01],
                                 [  1.98780891e-01,   2.72206656e-01,  -2.81625547e-01],
                                 [  3.40750979e-01,  -2.14488739e-01,   2.59752188e-01],
                                 [  3.33736587e-01,   2.20047831e-01,  -3.17140113e-01],
                                 [  1.72732540e-01,  -1.00164610e-01,  -1.28916770e-01],
                                 [ -1.72341217e-02,   1.19697206e-01,   5.50582046e-02],
                                 [ -8.90958288e-02,   4.39367260e-02,   6.83712479e-02],
                                 [ -3.70647333e-01,  -2.98659286e-01,   3.26884454e-01],
                                 [ -1.54324275e-01,  -1.40420775e-01,  -7.41156879e-02],
                                 [ -1.24330781e-01,  -2.13525561e-01,   1.05875348e-01],
                                 [ -1.59637078e-01,  -1.07013259e-01,  -1.29860494e-01],
                                 [  7.65315561e-02,   1.47094214e-01,  -1.25918021e-01],
                                 [ -3.38247008e-01,  -3.42711549e-01,  -4.06718173e-01],
                                 [  6.42402133e-03,   8.25113283e-02,   4.42312453e-02],
                                 [  2.05676384e-01,   1.67520025e-01,  -1.47195804e-01],
                                 [  3.39862329e-01,   2.62006941e-01,   2.80312138e-01],
                                 [ -5.23524606e-02,  -8.14812687e-03,   6.80591065e-02],
                                 [ -1.09879514e-01,  -9.54292646e-02,   3.18533451e-02],
                                 [ -1.63164724e-02,  -1.11446566e-01,  -1.29839273e-01],
                                 [ -2.24431320e-01,   2.95477606e-01,  -2.74596811e-01],
                                 [  4.62479927e-01,   4.43113619e-01,  -4.79537978e-01],
                                 [  1.94521976e-01,   2.91250104e-01,   2.02284245e-01],
                                 [ -1.72461992e-01,   2.36474835e-01,  -2.59757355e-01],
                                 [ -3.16481383e-02,  -2.13198146e-02,  -3.49479982e-02],
                                 [  1.41198594e-01,  -2.08969901e-01,   2.07187910e-01],
                                 [ -2.62482851e-01,  -2.11509243e-01,   2.96765360e-01],
                                 [ -4.02854497e-01,  -3.96599759e-01,  -2.79887626e-01],
                                 [ -1.39483943e-01,  -6.72014510e-02,   8.46528938e-02],
                                 [  2.71970145e-01,   3.58695603e-01,   2.67464304e-01],
                                 [ -2.85913789e-01,   2.86365208e-01,   2.24989304e-01],
                                 [ -2.33590689e-01,   2.05218609e-01,  -2.47401387e-01],
                                 [ -3.20659877e-01,  -3.17468813e-01,  -3.19317587e-01],
                                 [  4.99770730e-02,  -5.97357086e-02,  -1.24110262e-02],
                                 [ -1.78347777e-01,  -1.49800869e-01,  -2.38577440e-01],
                                 [ -2.56104913e-04,  -9.50571990e-02,   6.44812326e-02],
                                 [  8.04232110e-02,  -1.42042393e-01,  -7.58670198e-02],
                                 [ -1.73947053e-01,  -2.44126270e-01,  -1.42540079e-01]])

      self.e_ref = -562.993702807


   if hasattr(quippy,'Potential'):
      def testforceenergy(self):
         self.pot.calc(self.cluster, calc_force=True, calc_energy=True)
         self.assertArrayAlmostEqual(self.cluster.force, self.f_ref)
         self.assertAlmostEqual(self.cluster.energy, self.e_ref)

   def testevenparity(self):

      self.args['even_electrons'] = True

      self.at.z[1] = 15
      cluster_info = create_cluster_info_from_hybrid_mark(self.at, args_str(self.args))
      cluster2 = carve_cluster(self.at, args_str(self.args), cluster_info)
      self.assert_(cluster2.z.sum() % 2 == 0)

      self.at.z[1] = 13
      cluster_info = create_cluster_info_from_hybrid_mark(self.at, args_str(self.args))
      cluster3 = carve_cluster(self.at, args_str(self.args), cluster_info)
      self.assert_(cluster3.z.sum() % 2 == 0)

def getTestSuite():
   tl = unittest.TestLoader()
   return unittest.TestSuite([tl.loadTestsFromTestCase(TestCluster)])

if __name__ == '__main__':
   suite = getTestSuite()
   unittest.TextTestRunner(verbosity=2).run(suite)
