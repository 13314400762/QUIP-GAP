Index: reftraj_types.F
===================================================================
RCS file: /cvsroot/cp2k/cp2k/src/reftraj_types.F,v
retrieving revision 1.21
diff -b -c -3 -r1.21 reftraj_types.F
*** reftraj_types.F	31 Dec 2010 16:04:03 -0000	1.21
--- reftraj_types.F	29 Jun 2011 14:06:17 -0000
***************
*** 42,47 ****
--- 42,50 ----
       LOGICAL                                  :: msd
       TYPE(cp_parser_type), POINTER            :: traj_parser
       TYPE(cp_parser_type), POINTER            :: cell_parser
+ !NB start reftraj wait
+      LOGICAL				      :: wait
+ !NB end reftraj wait
    END TYPE reftraj_info_type
  
  ! *****************************************************************************
***************
*** 120,125 ****
--- 123,131 ----
      CALL section_vals_val_get(reftraj_section,"FIRST_SNAPSHOT",i_val=reftraj%info%first_snapshot,error=error)
      CALL section_vals_val_get(reftraj_section,"LAST_SNAPSHOT",i_val=reftraj%info%last_snapshot,error=error)
      CALL section_vals_val_get(reftraj_section,"STRIDE",i_val=reftraj%info%stride,error=error)
+ !NB start reftraj_wait
+     CALL section_vals_val_get(reftraj_section,"WAIT",l_val=reftraj%info%wait,error=error)
+ !NB end reftraj_wait
      CALL section_vals_val_get(reftraj_section,"EVAL_ENERGY_FORCES",l_val=reftraj%info%eval_ef,error=error)
    
      CALL section_vals_val_get(reftraj_section,"MSD%_SECTION_PARAMETERS_",&
Index: cp_parser_methods.F
===================================================================
RCS file: /cvsroot/cp2k/cp2k/src/cp_parser_methods.F,v
retrieving revision 1.21
diff -b -c -3 -r1.21 cp_parser_methods.F
*** cp_parser_methods.F	11 Jan 2011 17:01:25 -0000	1.21
--- cp_parser_methods.F	29 Jun 2011 14:06:17 -0000
***************
*** 218,226 ****
      CHARACTER(LEN=*), PARAMETER :: routineN = 'parser_get_line_from_buffer', &
        routineP = moduleN//':'//routineN
  
      istat = 0
      ! Check buffer
!     IF (parser%buffer%present_line_number==parser%buffer%size) THEN
         IF(ASSOCIATED(parser%buffer%sub_buffer)) THEN
            ! If the sub_buffer is initialized let's restore its buffer
            CALL finalize_sub_buffer(parser%buffer%sub_buffer,parser%buffer,error=error)
--- 218,233 ----
      CHARACTER(LEN=*), PARAMETER :: routineN = 'parser_get_line_from_buffer', &
        routineP = moduleN//':'//routineN
  
+ !NB start reftraj wait
+     LOGICAL already_at_end
+ !NB end reftraj wait
+ 
      istat = 0
      ! Check buffer
! !NB start reftraj wait
!     already_at_end = (parser%buffer%istat /= 0 .and. parser%buffer%present_line_number == parser%buffer%last_line_number)
!     IF (already_at_end .or. parser%buffer%present_line_number==parser%buffer%size) THEN
! !NB end reftraj wait
         IF(ASSOCIATED(parser%buffer%sub_buffer)) THEN
            ! If the sub_buffer is initialized let's restore its buffer
            CALL finalize_sub_buffer(parser%buffer%sub_buffer,parser%buffer,error=error)
Index: integrator.F
===================================================================
RCS file: /cvsroot/cp2k/cp2k/src/integrator.F,v
retrieving revision 1.198
diff -b -c -3 -r1.198 integrator.F
*** integrator.F	24 Feb 2011 20:08:26 -0000	1.198
--- integrator.F	29 Jun 2011 14:06:17 -0000
***************
*** 37,42 ****
--- 37,45 ----
    USE constraint_util,                 ONLY: getold,&
                                               pv_constraint
    USE cp_para_types,                   ONLY: cp_para_env_type
+ !NB start reftraj wait
+   USE cp_parser_types,                 ONLY: parser_reset
+ !NB end reftraj wait
    USE cp_parser_methods,               ONLY: parser_get_next_line,&
                                               parser_read_line
    USE cp_subsys_types,                 ONLY: cp_subsys_get,&
***************
*** 101,106 ****
--- 104,120 ----
    PUBLIC :: isokin, langevin, nve, nvt, npt_i, npt_f, nve_respa
    PUBLIC :: nph_uniaxial_damped, nph_uniaxial, reftraj
  
+ !NB start reftraj
+   INTERFACE
+     SUBROUTINE usleep(useconds) bind(C)
+     ! integer(c_int) function usleep(useconds) bind(C)
+       use iso_c_binding
+       implicit none
+       integer(c_int32_t), value :: useconds
+     ! end function
+     END SUBROUTINE
+   END INTERFACE
+ !NB end reftraj
  
  CONTAINS
  
***************
*** 1274,1281 ****
--- 1288,1317 ----
  
      ! SnapShots read from an external file (parsers calls are buffered! please
      ! don't put any additional MPI call!) [tlaino]
+ !NB start reftraj wait
+     if (reftraj_env%info%wait) then
+        ! wait for input
+        do while (.true.)
+ 	  ! check for input line
+ 	  CALL parser_read_line(reftraj_env%info%traj_parser,1,at_end=my_end,error=error)
+ 	  if (my_end) then ! end of file, no input available, wait
+ 	    call usleep(100000) ! 1e5 microsec = 100 ms
+ 	  else ! got som input, check for valid value, wait a bit and exit loop
+ 	    READ(reftraj_env%info%traj_parser%input_line,FMT="(I8)") nread
+ 	    CALL cp_assert(nread /= 0, cp_fatal_level,cp_assertion_failed,routineP,&
+ 		  "Read N=0 in interactive REFTRAJ.  Quitting."//&
+ CPSourceFileRef,&
+                   only_ionode=.TRUE.)
+ 	    ! wait for rest of file to be written before trying to read it
+ 	    call usleep(100000) ! 1e5 microsec = 100 ms
+ 	    exit
+ 	  endif
+        end do
+     else
         CALL parser_read_line(reftraj_env%info%traj_parser,1,error=error)
         READ(reftraj_env%info%traj_parser%input_line,FMT="(I8)") nread
+     endif
+ !NB end reftraj wait
      CPPostcondition(nread==nparticle,cp_failure_level,routineP,error,failure)
      CALL parser_read_line(reftraj_env%info%traj_parser,1,error=error)
      test_ok = .FALSE.
***************
*** 1315,1323 ****
      END IF
  
      IF(reftraj_env%info%variable_volume)THEN
         CALL parser_get_next_line(reftraj_env%info%cell_parser,1,at_end=my_end,error=error)
         CALL parse_cell_line(reftraj_env%info%cell_parser%input_line, cell_itimes, cell_time, h, vol, error)
!        CPPostcondition(trj_itimes==cell_itimes,cp_failure_level,routineP,error,failure)
         ! Check if we reached the end of the file and provide some info..
         IF (my_end) THEN
            CALL cp_assert(reftraj_env%isnap==(simpar%nsteps-1),cp_fatal_level,cp_assertion_failed,routineP,&
--- 1351,1374 ----
      END IF
  
      IF(reftraj_env%info%variable_volume)THEN
+ !NB start reftraj wait
+        if (reftraj_env%info%wait) then
+ 	  do while (.true.)
+ 	     CALL parser_get_next_line(reftraj_env%info%cell_parser,1,at_end=my_end,error=error)
+ 	     if (my_end) then
+ 	       call usleep(10000) ! 1e4 microsec = 10 ms
+ 	     else
+ 	       exit
+ 	     endif
+ 	  end do
+        else
  	  CALL parser_get_next_line(reftraj_env%info%cell_parser,1,at_end=my_end,error=error)
+        endif
+ !NB end reftraj wait
         CALL parse_cell_line(reftraj_env%info%cell_parser%input_line, cell_itimes, cell_time, h, vol, error)
! !NB start reftraj wait
!        CPPostcondition(trj_itimes==cell_itimes .or. reftraj_env%info%wait,cp_failure_level,routineP,error,failure)
! !NB end reftraj wait
         ! Check if we reached the end of the file and provide some info..
         IF (my_end) THEN
            CALL cp_assert(reftraj_env%isnap==(simpar%nsteps-1),cp_fatal_level,cp_assertion_failed,routineP,&
Index: input_cp2k_motion.F
===================================================================
RCS file: /cvsroot/cp2k/cp2k/src/input_cp2k_motion.F,v
retrieving revision 1.233
diff -b -c -3 -r1.233 input_cp2k_motion.F
*** input_cp2k_motion.F	23 Apr 2011 13:37:57 -0000	1.233
--- input_cp2k_motion.F	29 Jun 2011 14:06:17 -0000
***************
*** 2155,2160 ****
--- 2184,2197 ----
         CALL section_add_keyword(section,keyword,error=error)
         CALL keyword_release(keyword,error=error)
         
+ !NB start reftraj wait
+        CALL keyword_create(keyword, name="WAIT",&
+             description="If true, keep on waiting for new data to be written to reftraj file",&
+             repeats=.FALSE., usage="WAIT", default_l_val=.false., lone_keyword_l_val=.true.,  error=error)
+        CALL section_add_keyword(section,keyword,error=error)
+        CALL keyword_release(keyword,error=error)
+ !NB end reftraj wait
+        
         CALL keyword_create(keyword, name="eval_energy_forces",&
              description="Evaluate energy and forces for each retrieved snapshot during a REFTRAJ run",&
              repeats=.FALSE., default_l_val=.FALSE.,lone_keyword_l_val=.TRUE.,&
