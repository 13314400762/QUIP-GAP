Index: pw_grids.F
===================================================================
RCS file: /cvsroot/cp2k/cp2k/src/pw_grids.F,v
retrieving revision 1.115
diff -u -r1.115 pw_grids.F
--- pw_grids.F	31 Dec 2010 16:03:59 -0000	1.115
+++ pw_grids.F	2 Feb 2011 18:29:53 -0000
@@ -807,7 +807,7 @@
        CASE DEFAULT
           CPPrecondition(.FALSE.,cp_failure_level,routineP,error,failure)
        END SELECT
-       
+
        !..create group for real space distribution
        CALL mp_cart_create ( pw_grid % para % group, 2, &
             pw_grid % para % rs_dims, &
@@ -1111,9 +1111,14 @@
                                                 j1, j2
     INTEGER, ALLOCATABLE, DIMENSION(:)       :: cindex, icol, irow, rindex
     LOGICAL                                  :: failure
+!NB load balance
+    INTEGER                                  :: im, ic, jc, ii, jj
 
 !------------------------------------------------------------------------------
 
+#ifdef ORIGINAL_RAY_DISTRIBUTION
+!NB original distribution, can have bad load balance in cp_ddapc_apply_CD which
+!NB uses spherical cutoff even though overall grid is full and block distributed
     failure = .FALSE.
 
     i1 = SIZE ( yz_mask, 1 )
@@ -1154,6 +1159,72 @@
     DEALLOCATE ( irow, rindex, icol, cindex, STAT = ierr )
     CPPrecondition(ierr == 0,cp_failure_level,routineP,error,failure)
 
+#else
+!NB spiral out from origin, so that even if overall grid is full and
+!NB block distributed, spherical cutoff still leads to good load
+!NB balance in cp_ddapc_apply_CD
+
+    i1 = SIZE ( yz_mask, 1 )
+    i2 = SIZE ( yz_mask, 2 )
+    yz_index = 0
+
+   icount = 1
+   ic=i1/2
+   jc=i2/2
+   ii=ic
+   jj=jc
+   if (ii > 0 .and. ii <= i1 .and. jj > 0 .and. jj <= i2) then
+      if (yz_mask(ii,jj) /= 0) then
+	 yz_index(1,icount) = ii
+	 yz_index(2,icount) = jj
+	 icount = icount + 1
+      endif
+   endif
+   do im=1, max(ic+1,jc+1)
+      ii = ic-im
+      do jj=jc-im,jc+im
+	 if (ii > 0 .and. ii <= i1 .and. jj > 0 .and. jj <= i2) then
+	    if (yz_mask(ii,jj) /= 0) then
+	       yz_index(1,icount) = ii
+	       yz_index(2,icount) = jj
+	       icount = icount + 1
+	    endif
+	 endif
+      end do
+      ii = ic+im
+      do jj=jc-im,jc+im
+	 if (ii > 0 .and. ii <= i1 .and. jj > 0 .and. jj <= i2) then
+	    if (yz_mask(ii,jj) /= 0) then
+	       yz_index(1,icount) = ii
+	       yz_index(2,icount) = jj
+	       icount = icount + 1
+	    endif
+	 endif
+      end do
+      jj = jc-im
+      do ii=ic-im+1,ic+im-1
+	 if (ii > 0 .and. ii <= i1 .and. jj > 0 .and. jj <= i2) then
+	    if (yz_mask(ii,jj) /= 0) then
+	       yz_index(1,icount) = ii
+	       yz_index(2,icount) = jj
+	       icount = icount + 1
+	    endif
+	 endif
+      end do
+      jj = jc+im
+      do ii=ic-im+1,ic+im-1
+	 if (ii > 0 .and. ii <= i1 .and. jj > 0 .and. jj <= i2) then
+	    if (yz_mask(ii,jj) /= 0) then
+	       yz_index(1,icount) = ii
+	       yz_index(2,icount) = jj
+	       icount = icount + 1
+	    endif
+	 endif
+      end do
+   end do
+
+#endif
+
   END SUBROUTINE order_mask
 
 ! *****************************************************************************
