#!/usr/bin/perl -w
# H0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# H0 X
# H0 X   libAtoms+QUIP: atomistic simulation library
# H0 X
# H0 X   Portions of this code were written by
# H0 X     Albert Bartok-Partay, Silvia Cereda, Gabor Csanyi, James Kermode,
# H0 X     Ivan Solt, Wojciech Szlachta, Csilla Varnai, Steven Winfield.
# H0 X
# H0 X   Copyright 2006-2010.
# H0 X
# H0 X   These portions of the source code are released under the GNU General
# H0 X   Public License, version 2, http://www.gnu.org/copyleft/gpl.html
# H0 X
# H0 X   If you would like to license the source code under different terms,
# H0 X   please contact Gabor Csanyi, gabor@csanyi.net
# H0 X
# H0 X   Portions of this code were written by Noam Bernstein as part of
# H0 X   his employment for the U.S. Government, and are not subject
# H0 X   to copyright in the USA.
# H0 X
# H0 X
# H0 X   When using this software, please cite the following reference:
# H0 X
# H0 X   http://www.libatoms.org
# H0 X
# H0 X  Additional contributions by
# H0 X    Alessio Comisso, Chiara Gattinoni, and Gianpietro Moras
# H0 X
# H0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

use strict;

my $mypath=`dirname $0`; chomp ($mypath);
my $MODULE_NAME;
if ( -x "$mypath/module_name" ) {
  $MODULE_NAME="$mypath/module_name";
} else {
  $MODULE_NAME="module_name";
}

my $usage = "make dependency file for .f95 source files\nUsage: $0 [ -lc | -uc ] [ -suffix suffix ] -- filename [ filename2 ...]";

my $args = "";
while ($#ARGV > 0 && $ARGV[0] ne "--") {
  $args = "$args $ARGV[0]";
  shift @ARGV;
}

if ($ARGV[0] ne "--") {
  die "$usage\n";
} else {
  shift @ARGV;
}

my $ftnre='\.(f|F|f90|F90|f95|F95)$';

my (%module_defs, %module_uses);

my @local_modules;

foreach my $file (@ARGV) {
  if ($file !~ /$ftnre/) {
    warn "file $file not a fortran file\n";
    next;
  }
  if (! -f $file) {
    warn "file $file doesn't exist\n";
    next;
  }
  $module_defs{$file} = [];
  $module_uses{$file} = [];
  open FP, "<$file";
  while (my $line = <FP>) {
    if ($line =~ /^\s*module\s+(\S+)\s*(!.*)?$/) {
      my $mod_name = `echo $1 | $MODULE_NAME $args`; chomp ($mod_name);
      push @{$module_defs{$file}}, $mod_name;
      push @local_modules, $mod_name;
    }
    if ($line =~ /^\s*use\s+(\S+)/) {
      push @{$module_uses{$file}}, $1;
    }
  }
  close FP;
}

my $local_modules_re = '^('.join("|",@local_modules).')$';

foreach my $file (@ARGV) {
  my $fobj = $file;
  $fobj =~ s/$ftnre/.o/;
  foreach my $mod (@{$module_defs{$file}}) {
    print "$mod: $file\n";
    print "	make $fobj\n";
  }

  my $defsre = '^('.join("|",@{$module_defs{$file}}).')$';

  my $did_header = 0;
  foreach my $mod (@{$module_uses{$file}}) {
    my $mod_name = `echo $mod | $MODULE_NAME $args`; chomp ($mod_name);
    if ($mod_name !~ /$defsre/ && $mod_name =~ /$local_modules_re/) {
      if (! $did_header) {
	print "$fobj: \\\n  ";
	$did_header = 1;
      }
      print "$mod_name ";
    }
  }
  if ($did_header) {
    print "\n";
  }
  print "\n";
}
