# HQ XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# HQ X
# HQ X   quippy: Python interface to QUIP atomistic simulation library
# HQ X
# HQ X   Copyright James Kermode 2010
# HQ X
# HQ X   These portions of the source code are released under the GNU General
# HQ X   Public License, version 2, http://www.gnu.org/copyleft/gpl.html
# HQ X
# HQ X   If you would like to license the source code under different terms,
# HQ X   please contact James Kermode, james.kermode@gmail.com
# HQ X
# HQ X   When using this software, please cite the following reference:
# HQ X
# HQ X   http://www.jrkermode.co.uk/quippy
# HQ X
# HQ XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

from quippy import *
import unittest, quippy
import numpy as np
from quippytest import *

if hasattr(quippy, 'Potential'):

   class TestMDIonImplant(QuippyTestCase):
       def setUp(self):

          verbosity_push(PRINT_SILENT)

          self.pot = Potential('IP Brenner', param_str="""<Brenner_params n_types="1" label="graphene">
 <!-- 2nd set of parameters from Brenner (1990), with Re scaled to
  give graphene lattice constant of 1.42 A and delta and shift modified
  to match ab initio graphene elastic constants, as described in Arroyo
  et al, Phys. Rev. B. 69 115415 (2004).
  Gives Poission ratio 0.149, Youngs modulus in plane 342 J/m^2 and
  bending modulus 3.9 eV A^2 per atom, in very good agreement with
  Kudin et al, Phys. Rev. B. 64 235406 (2001) -->

  <per_type_data type="1" atomic_num="6" />
  <per_pair_data atnum_i="6" atnum_j="6" R1="1.7" R2="2.0" De="6.0" S="1.22"
     beta="2.1" delta="0.95" Re="1.360" shift="0.03" />
  <per_triplet_data atnum_c="6" atnum_j="6" atnum_k="6"
     a0="0.00020813" c0="330.0" d0="3.5" />
</Brenner_params>""")
           
          at = Atoms("""64
Lattice="7.12 0 0 0 7.12 0 0 0 7.12" Properties=Z:I:1:pos:R:3:velo:R:3
6 0 0 0 0.415235 0.61453 0.0
6 0 1.78 1.78 0.000582817358074157 0.00711434237220994 -0.00700331753800338
6 1.78 0 1.78 0.000691051967098114 0.00911786524377025 0.00404808356821055
6 1.78 1.78 0 0.00541240283361818 0.00290837758821486 -0.00788969171584108
6 0.89 0.89 0.89 0.000749694574792776 -0.00226058389488437 -0.00971224580098319
6 0.89 2.67 2.67 0.00251567336477376 0.00965608099009072 0.000656877031548979
6 2.67 0.89 2.67 -0.000398645946031071 0.00540062824865786 0.00840680057629011
6 2.67 2.67 0.89 -0.00727055346889471 0.00108125023976499 -0.0067801143187229
6 0 0 3.56 0.00235416851652825 -0.0092764872267075 0.00289908180783497
6 0 1.78 5.34 -0.00795992494903086 0.00472033680766267 -0.00378919717460323
6 1.78 0 5.34 0.00244126768674709 -0.00126777291523774 0.00961420635918712
6 1.78 1.78 3.56 0.00403228062791218 0.00679639153063546 -0.00612778712914138
6 0.89 0.89 4.45 -0.00280471737685911 -0.00636340308907936 0.00718614371981523
6 0.89 2.67 6.23 0.0098776194799066 -0.000106258458750824 -0.00155606637072897
6 2.67 0.89 6.23 0.000571778883477875 0.00566016437058379 0.00822408707434343
6 2.67 2.67 4.45 0.00736657993533068 -0.0015503399326447 0.00658254860594516
6 0 3.56 0 0.0077182163359258 0.00168852946911158 0.00613009011547057
6 0 5.34 1.78 -0.00475387158053442 0.00742363478845529 0.00472126588145844
6 1.78 3.56 1.78 -0.00226702763569842 0.00399158108566776 -0.00888413564369202
6 1.78 5.34 0 -0.00319468672341559 0.00947520481244332 0.000120293397504439
6 0.89 4.45 0.89 -0.00431891255746487 -0.00849355185078958 -0.00303423322750925
6 0.89 6.23 2.67 -0.000468031984564935 0.00607034206254805 0.0079329624545364
6 2.67 4.45 2.67 -0.00634296982660629 -0.00770644115291309 -0.000614409094536994
6 2.67 6.23 0.89 -0.00892019276495729 -0.00430390117592737 0.00138079531569838
6 0 3.56 3.56 -0.00377992934719245 0.009225802933909 -0.000772459937413849
6 0 5.34 5.34 0.00846485113497382 -0.00417103714505493 -0.0033088886952124
6 1.78 3.56 5.34 0.00564592032300588 -0.00143428287996107 0.00812812501912463
6 1.78 5.34 3.56 -0.00285588789180515 -0.00797801825872644 -0.00530990856916277
6 0.89 4.45 4.45 0.00734194804243505 0.00425119186301066 -0.0052936912155939
6 0.89 6.23 6.23 0.00874835735755321 -0.000241335200336796 -0.00483818156600422
6 2.67 4.45 6.23 -0.005442223096089 -0.00259956316529145 0.00797649541603675
6 2.67 6.23 4.45 0.00727931452901534 0.00103907332575777 0.00677730821280579
6 3.56 0 0 0.00211420858150929 0.00879153879561974 0.00427071044195055
6 3.56 1.78 1.78 0.0093897261812777 -0.00340768754745186 0.00046979550824754
6 5.34 0 1.78 -0.00162144288636289 -0.00393749278604932 0.00904804252455042
6 5.34 1.78 0 -0.00909610548667998 -0.00362675953864004 0.0020266919410887
6 4.45 0.89 0.89 0.00658988954959562 -0.00680186041933854 0.00321061529304994
6 4.45 2.67 2.67 0.0065012893953224 -0.0035254447297442 -0.00673085994920317
6 6.23 0.89 2.67 -0.00448869019378356 0.00744689453500237 0.00493917221088545
6 6.23 2.67 0.89 -0.000448352720396697 0.00217545330663632 -0.00975019911328779
6 3.56 0 3.56 -0.0049644059342509 0.00845507455998892 0.00196631327743129
6 3.56 1.78 5.34 0.00934289830274702 -0.00315581638110768 -0.00165863626912574
6 5.34 0 5.34 -0.00878461502661844 -0.00181983231857224 -0.00441800284816449
6 5.34 1.78 3.56 -0.00147167005243527 -0.00970539609169646 -0.00190774053792653
6 4.45 0.89 4.45 0.00334008992816498 0.000815864092480208 -0.00939032294728846
6 4.45 2.67 6.23 -0.00772510638017523 0.00634608489423106 -0.000223467962330837
6 6.23 0.89 6.23 -0.000497827408624023 0.00896600824690109 0.00440032544111505
6 6.23 2.67 4.45 0.00495334071376607 0.00595827892087733 0.00632165548526463
6 3.56 3.56 0 0.00199675073928175 -0.00942443820125607 0.00268196776190225
6 3.56 5.34 1.78 -7.1814845506717e-05 0.00740137614902591 0.00672417085807575
6 5.34 3.56 1.78 -0.00617894933881039 0.00780910388866579 0.000915686367944549
6 5.34 5.34 0 0.0089053893337024 -0.00399792266478582 -0.00217040438203836
6 4.45 4.45 0.89 0.00118534590656567 -0.00796780465682525 -0.00592528851892141
6 4.45 6.23 2.67 -0.00649113958444054 0.0060603644978977 -0.00459750900466006
6 6.23 4.45 2.67 -0.00433209204529156 0.00727077163128063 0.00532624242753617
6 6.23 6.23 0.89 0.00503426626667666 0.000627481721582709 -0.00861756519240099
6 3.56 3.56 3.56 -0.00465417907869825 -0.00528819107506711 0.00709743983820843
6 3.56 5.34 5.34 0.0025558178373565 0.000917635402958432 -0.00962422674553585
6 5.34 3.56 5.34 -0.00445817971615035 0.00670571020771072 -0.0059294252865442
6 5.34 5.34 3.56 0.00784683153254821 0.00526403263894811 -0.00327371276624816
6 4.45 4.45 4.45 0.00543094622197639 -0.001823116009368 0.00819640598984619
6 4.45 6.23 6.23 0.00378477599894336 -0.00216223975692277 -0.0090000105484052
6 6.23 4.45 6.23 -0.00924378031234806 0.000428670913396328 0.00379061562085293
6 6.23 6.23 4.45 -0.0098571449499882 0.000171478590631485 -0.0016754965018994""", format='string')
          self.ds = DynamicalSystem(at)
          self.ds.atoms.set_cutoff(self.pot.cutoff(), cutoff_skin=1.0)
          self.ds.atoms.calc_connect()
          self.ds.run(self.pot, dt=0.05, n_steps=1000, hook=lambda:None, hook_interval=1000)

          self.ref_at = Atoms("""64
Lattice="7.12 0.0 0.0 0.0 7.12 0.0 0.0 0.0 7.12" Properties=species:S:1:pos:R:3:velo:R:3
C               1.26864961      4.79260415      0.47313275     -0.03566260     -0.04332654     -0.03871893   
C              -0.22473098      2.09825414      1.04797900     -0.04563468     -0.01151026     -0.05472284   
C               2.46394402      1.10077357      1.84680437      0.03451338     -0.00430637      0.00550406   
C               5.20708743      1.50523801     -0.69299766      0.04500561      0.00330141     -0.11115907   
C               0.78627631      1.40244595      1.63094339     -0.07808963     -0.03900731      0.08141704   
C               1.16281451      3.51343452      2.20281613     -0.00720400      0.02705259      0.04641536   
C               3.16541150      2.12602471      2.71951607      0.00283406      0.03828114     -0.01299483   
C               2.91082682      3.30525108      0.60758749      0.06025178      0.07005990      0.04452444   
C               0.82269868      0.98549311      3.02820019      0.04746386      0.04848799     -0.10779549   
C               0.08940254      2.78060580      5.68435317      0.05921472     -0.01083206      0.01143701   
C               2.53554857     -0.27485906      5.55595604     -0.01381793      0.02361306      0.02361283   
C               2.43777480      1.44229094      4.38058168      0.00485676     -0.02574019      0.05766116   
C               0.96031140      1.12563872      4.39800365      0.07753370     -0.03146166      0.10219713   
C               0.91925091      4.11722591      3.81343167     -0.00539841      0.07623821      0.02054891   
C               2.59936664      2.30176096      6.59445962     -0.05092733     -0.02890910      0.09911821   
C               2.40295688      2.85294369      4.11233014     -0.04396583     -0.01769047     -0.03805691   
C              -0.87134448      3.81221445      0.12454522     -0.00485334      0.09946445      0.07168780   
C               0.45741804      5.77564492      0.72581849      0.02673884     -0.04260415     -0.01250101   
C               2.20450388      3.42710750      1.88034965     -0.08010766      0.10116935      0.01101960   
C               2.26460138     11.51387970     -0.52692795     -0.03701497      0.03071073      0.02401716   
C               1.23955797      5.91018977      2.87564915      0.01676330     -0.00861482      0.04457072   
C               1.65523321      7.00229425      3.09669175     -0.00897705      0.04313922     -0.00013510   
C               2.91795934      4.84916867      2.10718209      0.01408171     -0.01730006     -0.01477156   
C               3.06404039      7.16579365      0.96724508      0.02528516     -0.11156773     -0.03340596   
C               0.28747883      5.46380173      3.24450427     -0.04606425      0.01175371     -0.00448408   
C               0.55947813      6.94087197      4.93153161      0.00024653      0.07297221     -0.03599937   
C               1.54025599      2.76777047      5.60004827      0.01908497      0.03840045     -0.03239194   
C               2.55912008      4.86438694      4.60798684      0.00288429      0.00700571      0.01367872   
C               0.58889529      4.88957749      5.07385032     -0.00064114     -0.02490380      0.04603710   
C               0.36968530      6.10536718      6.09952919     -0.01753758     -0.05892094     -0.05929886   
C               3.75473057      4.59810172      5.31091897      0.07621908      0.09629074     -0.06085829   
C               3.25871920      6.49346946      4.62751210      0.02593081      0.03464305     -0.05541617   
C               2.52863440     -0.44527044     -0.14789040     -0.01113689     -0.01587606     -0.01228261   
C               4.42134516      1.54006586      1.88620921      0.05137550     -0.07720099     -0.00798789   
C               5.86425934      0.10951552      2.25821394     -0.02673592      0.00050357     -0.00206466   
C               8.10791374      0.70800009     -0.55120888     -0.07943132      0.02493290      0.02591723   
C               4.26074294      0.68813028      0.20211024      0.02605866      0.00878616      0.01839223   
C               4.59386673      3.49367121      2.47123987      0.08841007      0.09777928      0.01067476   
C               6.32120585      1.21137430      3.05779034      0.03257346      0.05070156      0.00835367   
C               5.45639227      1.69645825      1.37101009      0.01723747     -0.08970460      0.00866453   
C               3.66829202     -0.28269114      3.39251791     -0.03178843     -0.04434908     -0.03313800   
C               3.54742502      2.14217598      5.72128344      0.00773864      0.06026470     -0.06742703   
C               5.05521750      0.41208286      4.81289416      0.02580520     -0.03044756     -0.00080901   
C               5.39747114      2.29207471      3.76939985     -0.03688992      0.06038917     -0.00018755   
C               4.13337001      1.98893233      4.59748275      0.01828995      0.03522552      0.00599903   
C               5.50684642      2.69782108      7.70731692     -0.00416895     -0.04340176      0.00389659   
C               7.38159657      1.90021076      6.84252249      0.00714835      0.01744303     -0.01443519   
C               6.03559376      2.93670572      4.60855636      0.00032183      0.04697053     -0.03054029   
C               4.54010750      3.43912353      1.23011212      0.09683839      0.02302263      0.06208578   
C               3.52371620      5.60975996      1.58519974     -0.01328205      0.07900619      0.03386782   
C               6.20356732      3.68335502      2.37623451      0.05871190      0.01095220      0.02865506   
C               5.81258524      6.43046161     -0.20518821      0.00266268      0.02882928      0.01748802   
C               4.18728724      5.17657395      0.47360491      0.04945007      0.01518575     -0.01493787   
C               4.72004591      6.80563677      2.60778534      0.05512228      0.02519648     -0.01651475   
C               6.56126313      5.03316613      2.38697256      0.05703118      0.05869702      0.05093147   
C               6.32830077      6.80768302      0.99176342     -0.06818602     -0.01671715      0.02367310   
C               3.16905519      3.93339117      3.50563917     -0.07417240     -0.00144728     -0.00660628   
C               4.88717084      5.44716951      5.46624598      0.07222469     -0.00530211      0.00405178   
C               5.93635493      4.25689341      4.88273408     -0.04516525      0.03679229      0.02789475   
C               5.43178312      5.57552948      3.15014166     -0.01448630      0.01830758     -0.04788503   
C               5.05996578      4.28494656      3.78806133      0.00129371      0.02644094     -0.05709823   
C               4.76437341      5.92329989      6.67893228      0.04021195     -0.09935521     -0.01952203   
C               6.26325375      4.47740531      6.16090736      0.07467479      0.02658015     -0.03062962   
C               5.87494596      6.49986336      4.25006367     -0.00991203      0.00327203      0.00314717   """,format='string')
          self.ref_at.map_into_cell()

       def tearDown(self):
          verbosity_pop()

       def test_final_state(self):
	  self.ds.atoms.set_map_shift()
          self.assertArrayAlmostEqual(self.ds.atoms.pos+np.dot(self.ds.atoms.lattice, self.ds.atoms.map_shift), self.ref_at.pos)
          self.assertArrayAlmostEqual(self.ds.atoms.velo, self.ref_at.velo)

           
if __name__ == '__main__':
   unittest.main()

