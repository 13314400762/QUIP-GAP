#!/bin/bash

MAILS=bernstei@dave.nrl.navy.mil,gc121@cam.ac.uk,james.kermode@gmail.com
## MAILS=bernstei@dave.nrl.navy.mil

REPORT_FILE=tag_QUIP_latest_good_version_report.txt
GOOD_REPORT_FILE=latest_good_version_report.txt
SVN=/share/apps/local/bin/svn

LOCKFILE=tag.lock

function test_version {
   svn_version=$1

   rm -rf QUIP_test
   echo "starting ${SVN} co -r$svn_version $SVNROOT/trunk/QUIP QUIP_test"
   ${SVN} co -r$svn_version $SVNROOT/trunk/QUIP QUIP_test > /dev/null 2>&1 
   svn_stat=$?
   echo "finished ${SVN} co -r$svn_version $SVNROOT/trunk/QUIP QUIP_test"
   if [[ $svn_stat != 0 ]]; then
      echo "Failed to check out version $svn_version"
      make_status="Checkout Failed"
      quippy_status="Checkout Failed"
      return
   fi

   if [ ! -d QUIP_test ]; then
      echo "Can't find QUIP_test directory to run test in.  svn co must have failed"
      make_status="Checkout Failed"
      quippy_status="Checkout Failed"
      return
   fi
   pushd QUIP_test > /dev/null

   declare -a suffixes_a
   declare -a fields

   # get suffixes from config file
   suffixes=`egrep -v '^#' ../tag_test_configs | fgrep SUFFIXES | sed 's/SUFFIXES[ ]*//'`
   suffixes_a=($suffixes)
   # will use empty suffix plus those read from file
   n_suffixes=$(( 1 + ${#suffixes_a[@]} ))

   make_status=""
   quippy_status=""
   # loop over lines listing compiler modules and versions
   rm -f tag_test_configs.lines
   egrep -v '^#' ../tag_test_configs | egrep -v SUFFIXES > tag_test_configs.lines

   ## cat tag_test_configs.lines | while read line; do
   orig_IFS="$IFS"
   IFS='
'
   configs=( $( cat tag_test_configs.lines ) )
   IFS="$orig_IFS"
   for li in `seq 0 $(( ${#configs[@]} - 1 ))`; do
      line=${configs[$li]}
      echo "doing line '$line'" 1>&2
      fields=($line)
      compiler_module_dir=${fields[0]}
      compiler_version=${fields[1]}
      compiler_module="$compiler_module_dir/$compiler_version"

      echo "compiler_module $compiler_module" 1>&2

      module unload intel gnu pgi mkl openmpi
      mkl_module="mkl"
      if [[ $compiler_module == "intel" ]]; then
	 if echo $compiler_version | egrep -q '^12\.'; then
	    mkl_module=${compiler_module/intel/mkl}
	 fi
      fi

      module load ${compiler_module} ${mkl_module} openmpi > module_load.out 2>&1
      if grep -q "Unable to locate a modulefile" module_load.out; then
	 echo "Failed in 'module load ${compiler_module} mkl openmpi'"
	 rm -f $LOCKFILE
	 exit 1
      fi
      # undo openmpi module's setting, because it fails from within python
      export OMPI_MCA_mpi_paffinity_alone=0

      # loop over empty suffix and suffixes previously read in
      suffix_i=-1
      for suffix in "" $suffixes; do
	 echo "suffix $suffix" 1>&2
	 suffix_i=$(( $suffix_i + 1 ))
	 # extract required status of make and quippy
	 make_req=${fields[$(( 2*$suffix_i + 2 ))]}
	 quippy_req=${fields[$(( 2*$suffix_i + 3 ))]}

	 if [[ $make_req != "-" ]]; then
	    if echo $compiler_module | grep -q intel; then
	       export QUIP_ARCH=linux_x86_64_ifort_gcc${suffix}
	    else
	       if echo $compiler_module | grep -q gnu; then
		  export QUIP_ARCH=linux_x86_64_gfortran${suffix}
	       else
		  echo "Unknown compiler_module type $compiler_module"
		  popd > /dev/null
		  rm -f $LOCKFILE
		  exit 1
	       fi
	    fi

	    compiler_name="${compiler_module_dir}_${compiler_version}"

	    rm -rf build.${QUIP_ARCH}
	    mkdir build.${QUIP_ARCH}
	    cp ../Makefile.inc.${QUIP_ARCH} build.${QUIP_ARCH}/Makefile.inc

	    # clean thoroughly
	    # no need for deepclean in QUIP, we just wiped build dir
	    ## make deepclean >> ../autobuild.version_${svn_version} 2>&1
	    # here we clean in ThirdParty, quippy is done below 
	    rm -rf ThirdParty/FoX*/obj*

	    # try QUIP make all
	    make all > ../make.out.${svn_version}.${compiler_name}${suffix} 2>&1
	    if [[ $? == 0 ]]; then
	       make_status=${make_status}"${compiler_name}${suffix} OK "
	    else
	       if [[ $make_req == "O" ]]; then
		  make_status=${make_status}"${compiler_name}${suffix} Optional_Failed "
	       else
		  make_status=${make_status}"${compiler_name}${suffix} Failed "
	       fi
	       if [[ $svn_version == "HEAD" ]]; then
		  failed_list=${failed_list}"make.out.${svn_version}.${compiler_name}${suffix} "
	       fi
	    fi

	    # try quippy make test
	    if [[ $quippy_req != "-" ]]; then
	       pushd Tools/quippy > /dev/null
	       make clean > /dev/null
	       make test > ../../../quippy_test.out.${svn_version}.${compiler_name}${suffix} 2>&1
	       if [[ $? == 0 ]]; then
		  quippy_status=${quippy_status}"${compiler_name}${suffix} OK "
	       else
		  if [[ $quippy_req == "O" ]]; then
		     quippy_status=${quippy_status}"${compiler_name}${suffix} Optional_Failed "
		  else
		     quippy_status=${quippy_status}"${compiler_name}${suffix} Failed "
		  fi
		  if [[ $svn_version == "HEAD" ]]; then
		     failed_list=${failed_list}"quippy_test.out.${svn_version}.${compiler_name}${suffix} "
		  fi
	       fi
	       popd > /dev/null
	    fi # quippy_req != -
	 fi # make_req != -
      done # suffix
   done # loop over config lines
   popd > /dev/null
}

function status_no_Failed {
   declare -a a
   ii=1
   for f in $*; do
      a[$ii]=$f
      ii=$(( $ii + 1 ))
   done
   is_OK=0
   for n in `seq 2 2 $#`; do
      if [[ ${a[$n]} == 'Failed' ]]; then
	 is_OK=1
      fi
   done
   return $is_OK
}

if [ -f $LOCKFILE ]; then
   echo "Found lockfile"
   cat $LOCKFILE
   exit 0
fi

date > $LOCKFILE

. /share/apps/local/etc/profile.d/modules.sh
module load silent

test_version HEAD
status_no_Failed $make_status; make_ok=$?
status_no_Failed $quippy_status; quippy_ok=$?

cd QUIP_test; cur_rev=`svnversion -n`; cd ..
HEAD_rev=${cur_rev}
echo "HEAD($cur_rev) make $make_status quippy test $quippy_status"
echo "HEAD($cur_rev) make $make_status quippy test $quippy_status" > ${REPORT_FILE}
if [[ $make_ok != 0 || $quippy_ok != 0 ]]; then
   author=`${SVN} log -rHEAD QUIP_test/ | head -2 | tail -1 | awk '{print $3}'`
   failed_mails="$failed_mails"`egrep "^${author} " AUTHORS | awk '{print $2}'`" "
   echo "Version ${cur_rev} was checked in by ${author}" >> ${REPORT_FILE}
fi

max_versions_back=3
retried=0
i=0
while [[ ( $make_ok != 0 || $quippy_ok != 0) && $i -lt ${max_versions_back} ]]; do
   retried=1
   i=$(( $i + 1 ))
   cur_rev=$(( $cur_rev - 1 ))

   test_version ${cur_rev}
   echo "${cur_rev} make $make_status quippy test $quippy_status"
   echo "${cur_rev} make $make_status quippy test $quippy_status" >> ${REPORT_FILE}
   status_no_Failed $make_status; make_ok=$?
   status_no_Failed $quippy_status; quippy_ok=$?
   if [[ $make_ok != 0 || $quippy_ok != 0 ]]; then
      author=`${SVN} log -r${cur_rev} QUIP_test/ | head -2 | tail -1 | awk '{print $3}'`
      failed_mails="$failed_mails"`egrep "^${author} " AUTHORS | awk '{print $2}'`" "
      echo "Version ${cur_rev} was checked in by ${author}" >> ${REPORT_FILE}
   fi
done

if [[ $make_ok == 0 && $quippy_ok == 0 ]]; then
   (head -1 ${REPORT_FILE} | awk '{print "revision "$1}'; \
    echo ""; \
    echo "tested compilers (Makefile.inc used are in QUIP_ROOT/utility_scripts/tag_QUIP_latest_good_version_Makefile_incs/)"; \
    echo ""; \
    echo "QUIP"; \
    head -1 ${REPORT_FILE} | sed -e 's/^[^ ]* //' -e 's/[ ]*quippy test.*//' -e 's/[ ]*OK[ ]*/\n/'g | egrep -v '^[ ]*$'; \
    echo ""; \
    echo "quippy"; \
    head -1 ${REPORT_FILE} | sed -e 's/^[^ ]* //' -e 's/.*quippy test[ ]*//' -e 's/[ ]*OK[ ]*/\n/'g | egrep -v '^[ ]*$' ) > ${GOOD_REPORT_FILE}

   echo ${SVN} delete -m "Get rid of old QUIP-stable tag in preparation for a new one" $SVNROOT/tags/QUIP-stable >> ${REPORT_FILE}
   echo ${SVN} copy -m "Update QUIP-stable tag to revision ${cur_rev} (current HEAD rev is ${HEAD_rev})" -r${cur_rev} $SVNROOT/trunk/QUIP $SVNROOT/tags/QUIP-stable >> ${REPORT_FILE}
   ${SVN} delete -m "Get rid of old QUIP-stable tag in preparation for a new one" $SVNROOT/tags/QUIP-stable
   ${SVN} copy -m "Update QUIP-stable tag to revision ${cur_rev} (current HEAD rev is ${HEAD_rev})" -r${cur_rev} $SVNROOT/trunk/QUIP $SVNROOT/tags/QUIP-stable
   rm -rf QUIP-stable
   ${SVN} checkout $SVNROOT/tags/QUIP-stable QUIP-stable --depth files 
   cd QUIP-stable
   echo $cur_rev > STABLE_VERSION
   ${SVN} add STABLE_VERSION
   ${SVN} commit -m "Add STABLE_VERSION ($cur_rev) file to tags/QUIP-stable" STABLE_VERSION
   cd ..
   if [[ $retried == 0 ]]; then
      rm -f mail_msg.txt
      (echo "latest QUIP revision to compile is current HEAD=${cur_rev}"; echo ""; cat ${REPORT_FILE} ) > mail_msg.txt
      echo "mutt -s \"QUIP autobuild succeeded\" ${MAILS} < mail_msg.txt"
      mutt -s "QUIP autobuild succeeded" ${MAILS} < mail_msg.txt
      rm -f $LOCKFILE
      exit 0
   else
      rm -f mail_msg.txt
      (echo "latest QUIP revision to compile is not HEAD=${HEAD_rev}, but ${cur_rev}"; echo ""; cat ${REPORT_FILE} ) > mail_msg.txt
      echo "mutt -s \"QUIP autobuild failed on HEAD, succeeded eventually\" `for f in $failed_list; do echo \"-a $f \"; done` `for c in $failed_mails; do echo \"-c $c \"; done` ${MAILS} < mail_msg.txt"
      mutt -s "QUIP autobuild failed on HEAD, succeeded eventually" `for f in $failed_list; do echo "-a $f "; done` `for c in $failed_mails; do echo "-c $c "; done` ${MAILS} < mail_msg.txt
      rm -f $LOCKFILE
      exit 2
   fi
else
   echo "Failed to find working revision between HEAD and $cur_rev"
   echo "Failed to find working revision between HEAD and $cur_rev" >> ${REPORT_FILE}
   rm -f mail_msg.txt
   (echo "Failed to find working revision between HEAD=${HEAD_rev} and ${cur_rev}"; echo ""; cat ${REPORT_FILE} ) > mail_msg.txt
   echo "mutt -s \"QUIP autobuild failed\" `for f in $failed_list; do echo \"-a $f \"; done` `for c in $failed_mails; do echo \"-c $c \"; done` ${MAILS} < mail_msg.txt"
   mutt -s "QUIP autobuild failed" `for f in $failed_list; do echo "-a $f "; done` `for c in $failed_mails; do echo "-c $c "; done` ${MAILS} < mail_msg.txt
   rm -f $LOCKFILE
   exit 3
fi

echo "How did we get here?"
rm -f $LOCKFILE
exit 0
